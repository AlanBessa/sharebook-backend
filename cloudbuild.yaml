# Example build script to create a Docker image from a .NET Core 2.0 Web Api app.
steps:

# .NET Core 2.0 by default restores before any build, so we can
# combine the restore and publish operations in a single statement.
- name: 'gcr.io/cloud-builders/dotnet'
  args: [ 'publish', '-c', 'Release' ]
  dir: 'ShareBook'

# Build the app image.
- name: 'gcr.io/cloud-builders/docker'
  args: [ 'build', '-t', 'gcr.io/$PROJECT_ID/sharebook-api', '.' ]
  dir: 'ShareBook'

# Publish the app.
images: [ 'gcr.io/$PROJECT_ID/sharebook-api' ]

# update manifest with few env var (mainly release tag)
- name: 'gcr.io/cloud-builders/gcloud'
  id: Manifest
  entrypoint: /bin/sh
  args:
  - '-c'
  - |
      sed -e \
      's/PROJECT_ID/${PROJECT_ID}/g; s/RELEASE_TAG/${TAG_NAME}/g; s/IMAGE_SHA/${SHORT_SHA}/g' \
      deployments/service.yaml > deployments/final.yaml
# deploy service to Knative cluster using the above gen'd manifest
- name: 'gcr.io/cloud-builders/kubectl'
  id: Deploy
  args: ['apply','-f','deployments/final.yaml']
  env:
  - 'CLOUDSDK_COMPUTE_ZONE=${_CLUSTER_ZONE}'
  - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLUSTER_NAME}'